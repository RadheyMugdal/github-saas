// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [vector]
}

model User {
    id                String              @id
    name              String
    email             String
    emailVerified     Boolean
    image             String?
    createdAt         DateTime
    updatedAt         DateTime
    credits           Int                 @default(150)
    sessions          Session[]
    accounts          Account[]
    UserToProject     UserToProject[]
    Question          Question[]
    StripeTransaction StripeTransaction[]

    @@unique([email])
    @@map("user")
}

model Session {
    id        String   @id
    expiresAt DateTime
    token     String
    createdAt DateTime
    updatedAt DateTime
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime

    @@map("account")
}

model Verification {
    id         String    @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?

    @@map("verification")
}

model Project {
    id                  String                @id @default(cuid())
    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
    name                String
    githubUrl           String
    githubToken         String?
    deletedAt           DateTime?
    userToProject       UserToProject[]
    commit              Commit[]
    SourceCodeEmbedding SourceCodeEmbedding[]
    Question            Question[]
    meetings            Meeting[]
}

model UserToProject {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    projectId String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@unique([userId, projectId])
}

model Commit {
    id                 String   @id @default(cuid())
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    projectId          String
    project            Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    commitMessage      String
    commitHash         String
    commitAuthorName   String
    commitAuthorAvatar String
    commitDate         DateTime
    summary            String
}

model SourceCodeEmbedding {
    id               String                      @id @default(cuid())
    summaryEmbedding Unsupported("vector(768)")?
    sourceCode       String
    fileName         String
    summary          String
    projectId        String
    project          Project                     @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Question {
    id              String   @id @default(cuid())
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    question        String
    answer          String
    filesReferences Json
    projectId       String
    project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    userId          String
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Meeting {
    id         String        @id @default(cuid())
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
    name       String
    meetingUrl String
    projectId  String
    project    Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
    status     MeetingStatus @default(PROCESSING)
    issues     Issue[]
}

model Issue {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    start     String
    end       String
    gist      String
    headline  String
    summary   String
    meetingId String
    meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
}

model StripeTransaction {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId  String
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    credits Int
}

enum MeetingStatus {
    PROCESSING
    COMPLETED
}
